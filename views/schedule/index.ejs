<!-- Page Header -->
<div class="row align-items-center mb-4">
    <div class="col-md-8">
        <h1 class="mb-0">League Schedule</h1>
    </div>
    <div class="col-md-4 text-end">
        <span class="badge bg-info fs-6" id="currentWeekBadge">Current Week: <%= currentWeek %></span>
    </div>
</div>

<!-- Position Breakdown Section -->
<div class="card mb-4">
    <div class="card-header bg-secondary text-white">
        <h5 class="mb-0" style="cursor: pointer;" onclick="togglePositionBreakdown()">
            <i class="bi bi-grid-3x3-gap-fill me-2"></i>
            Schedule Position Breakdown
            <i class="bi bi-chevron-down float-end" id="positionBreakdownChevron"></i>
        </h5>
    </div>
    <div class="card-body collapse" id="positionBreakdownContent">
        <div class="mb-3">
            <span class="badge bg-secondary me-2">Gray = Primary Games</span>
            <span class="badge bg-primary">Blue = Bonus Games</span>
        </div>
        <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
            <table class="table table-sm table-bordered" style="max-width: 800px;">
                <thead class="table-light sticky-top">
                    <tr>
                        <th style="background-color: #f8f9fa; width: 120px;">Week</th>
                        <th class="text-start" style="background-color: #f8f9fa;">Matchups (Position Numbers)</th>
                    </tr>
                </thead>
                <tbody style="font-size: 0.95rem;">
                    <% const scheduleBreakdown = [
                        { week: 1, primary: ['1-10', '2-6', '3-5', '4-9', '7-8'], bonus: ['1-7', '2-3', '4-10', '5-6', '8-9'] },
                        { week: 2, primary: ['1-4', '2-7', '3-6', '5-9', '8-10'], bonus: ['1-2', '3-4', '5-10', '6-8', '7-9'] },
                        { week: 3, primary: ['1-5', '2-8', '3-9', '4-7', '6-10'], bonus: ['1-9', '2-10', '3-7', '4-6', '5-8'] },
                        { week: 4, primary: ['1-6', '2-9', '3-8', '4-5', '7-10'], bonus: ['1-8', '2-4', '3-10', '5-7', '6-9'], note: 'League fees due!' },
                        { week: 5, primary: ['1-3', '2-5', '4-8', '6-7', '9-10'], bonus: [] },
                        { week: 6, primary: ['1-5', '2-8', '3-9', '4-7', '6-10'], bonus: ['1-2', '3-4', '5-10', '6-8', '7-9'] },
                        { week: 7, primary: ['1-7', '2-3', '4-10', '5-6', '8-9'], bonus: ['1-10', '2-6', '3-5', '4-9', '7-8'] },
                        { week: 8, primary: ['1-8', '2-4', '3-10', '5-7', '6-9'], bonus: [] },
                        { week: 9, primary: ['1-9', '2-10', '3-7', '4-6', '5-8'], bonus: [] },
                        { week: 10, primary: ['1-4', '2-7', '3-6', '5-9', '8-10'], bonus: [] },
                        { week: 11, primary: ['1-3', '2-5', '4-8', '6-7', '9-10'], bonus: ['1-6', '2-9', '3-8', '4-5', '7-10'] },
                        { week: 12, primary: ['1-9', '2-10', '3-7', '4-6', '5-8'], bonus: [] },
                        { week: 13, primary: ['1-8', '2-4', '3-10', '5-7', '6-9'], bonus: ['1-10', '2-6', '3-5', '4-9', '7-8'] },
                        { week: 14, primary: ['1-7', '2-3', '4-10', '5-6', '8-9'], bonus: [] },
                        { week: 15, primary: ['1-2', '3-4', '5-10', '6-8', '7-9'], bonus: ['1-5', '2-8', '3-9', '4-7', '6-10'], note: 'Trading Deadline' },
                        { week: 16, primary: ['1-6', '2-9', '3-8', '4-5', '7-10'], bonus: ['1-3', '2-5', '4-8', '6-7', '9-10'] },
                        { week: 17, primary: ['1-4', '2-7', '3-6', '5-9', '8-10'], bonus: [] }
                    ]; %>
                    <% scheduleBreakdown.forEach(week => { %>
                        <tr>
                            <td class="fw-bold">
                                Week <%= week.week %>
                                <% if (week.note) { %>
                                    <div class="text-danger small"><%= week.note %></div>
                                <% } %>
                            </td>
                            <td>
                                <% week.primary.forEach(matchup => { %>
                                    <span class="badge bg-secondary me-1 mb-1 fs-6"><%= matchup %></span>
                                <% }); %>
                                <% if (week.bonus.length > 0) { %>
                                    <br>
                                    <% week.bonus.forEach(matchup => { %>
                                        <span class="badge bg-primary me-1 mb-1 fs-6"><%= matchup %></span>
                                    <% }); %>
                                <% } %>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        <div class="mt-3 text-muted small">
            <strong>Note:</strong> Numbers represent team positions in the league. Teams are assigned to these positions at the beginning of the season.
        </div>
    </div>
</div>

<!-- Controls Section -->
<div class="card mb-4">
    <div class="card-header bg-light">
        <div class="row align-items-center">
            <div class="col-md-6">
                <div class="btn-group" role="group" aria-label="View toggle">
                    <input type="radio" class="btn-check" name="viewMode" id="leagueView" value="league" checked>
                    <label class="btn btn-outline-primary" for="leagueView">Week Schedule</label>
                    
                    <input type="radio" class="btn-check" name="viewMode" id="teamView" value="team">
                    <label class="btn btn-outline-primary" for="teamView">Team Schedule</label>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <!-- League View Controls -->
        <div class="row g-3" id="leagueControls">
            <div class="col-md-4">
                <label for="weekSelect" class="form-label">Select Week</label>
                <select class="form-select" id="weekSelect">
                    <% for (let i = 1; i <= 17; i++) { %>
                        <option value="<%= i %>" <%= i === currentWeek ? 'selected' : '' %>>Week <%= i %></option>
                    <% } %>
                </select>
            </div>
            <div class="col-md-8 d-flex align-items-end">
                <button class="btn btn-primary" onclick="goToCurrentWeek()">
                    <i class="bi bi-calendar-check"></i> Current Week
                </button>
            </div>
        </div>
        
        <!-- Team View Controls -->
        <div class="row g-3 d-none" id="teamControls">
            <div class="col-md-6">
                <label for="teamSelect" class="form-label">Select Team</label>
                <select class="form-select" id="teamSelect">
                    <% if (userTeam) { %>
                        <option value="<%= userTeam.team_id %>" selected>My Team (<%= userTeam.team_name %>)</option>
                    <% } %>
                    <% teams.forEach(team => { %>
                        <% if (!userTeam || team.team_id !== userTeam.team_id) { %>
                            <option value="<%= team.team_id %>"><%= team.team_name %></option>
                        <% } %>
                    <% }); %>
                </select>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Content -->
<div class="card">
    <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0" id="scheduleTitle">Week <%= currentWeek %> Schedule</h5>
            <div id="scheduleStats" class="text-muted small">
                <!-- Stats will be populated by JavaScript -->
            </div>
        </div>
    </div>
    <div class="card-body">
        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="text-center py-4 d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading schedule...</p>
        </div>
        
        <!-- Schedule Content -->
        <div id="scheduleContent">
            <!-- Content will be populated by JavaScript -->
        </div>
        
        <!-- No Data Message -->
        <div id="noDataMessage" class="text-center py-4 d-none">
            <i class="bi bi-calendar-x text-muted" style="font-size: 3rem;"></i>
            <h5 class="text-muted mt-3">No Schedule Data</h5>
            <p class="text-muted">No games found for the selected criteria.</p>
        </div>
    </div>
</div>

<style>
    .game-card {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        margin-bottom: 1rem;
        transition: box-shadow 0.15s ease-in-out;
    }

    .game-card:hover {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .game-card.completed {
        background-color: #f8f9fa;
        border-color: #28a745;
    }

    .team-section {
        display: flex;
        flex-direction: column;
        min-height: 110px;
    }

    .team-info-wrapper {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .team-score-wrapper {
        margin-top: auto;
        padding-top: 8px;
    }

    .team-name {
        font-weight: 600;
        color: #495057;
    }

    .vs-separator {
        color: #6c757d;
        font-weight: 500;
        margin: 0 0.5rem;
    }
    
    
    .game-result {
        font-weight: bold;
    }

    .game-score {
        font-size: 1.3rem;
        font-weight: bold;
        padding: 4px 12px;
        border-radius: 6px;
        display: inline-block;
    }

    .game-score.win {
        color: #fff;
        background-color: #28a745;
    }

    .game-score.loss {
        color: #fff;
        background-color: #dc3545;
    }

    .win {
        color: #28a745;
    }

    .loss {
        color: #dc3545;
    }
    
    .team-schedule-row {
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem 0;
    }
    
    .team-schedule-row:last-child {
        border-bottom: none;
    }
    
    .week-number {
        font-weight: 600;
        color: #495057;
    }
    
    .opponent-name {
        font-weight: 500;
    }
    
    .user-game {
        border: 2px solid #0d6efd;
        background-color: #f8f9ff;
        box-shadow: 0 0.25rem 0.5rem rgba(13, 110, 253, 0.15);
    }
    
    .user-team {
        color: #0d6efd;
        font-weight: 700;
    }

    /* Lineup Display Styles */
    .lineup-display {
        text-align: left;
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
    }

    .lineup-section {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 10px;
    }

    .lineup-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .lineup-player {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 12px;
        margin: 5px 0;
        border-radius: 5px;
        background: white;
        border: 1px solid #e9ecef;
    }

    .lineup-player.starter {
        background: #d4edda;
        border-color: #c3e6cb;
    }

    .lineup-player.backup {
        background: #f8f9fa;
        border-color: #e9ecef;
    }

    .lineup-player.head-coach {
        background: #fff3cd;
        border-color: #ffeaa7;
    }

    .player-info {
        display: flex;
        flex-direction: column;
    }

    .player-name {
        font-weight: 600;
        font-size: 0.9rem;
        color: #333;
    }

    .player-team {
        font-size: 0.8rem;
        color: #666;
    }

    .role-badge {
        font-size: 0.75rem;
        padding: 3px 8px;
        border-radius: 10px;
        font-weight: 500;
        text-transform: uppercase;
    }

    .starter-badge {
        background: #28a745;
        color: white;
    }

    .backup-badge {
        background: #6c757d;
        color: white;
    }

    /* Mobile optimizations */
    @media (max-width: 768px) {
        .team-section {
            min-height: 95px;
        }

        .lineup-display .row {
            margin: 0;
        }

        .lineup-display .col-md-6 {
            padding: 0 5px;
        }

        .lineup-player {
            padding: 6px 8px;
        }

        .player-name {
            font-size: 0.85rem;
        }

        .player-team {
            font-size: 0.75rem;
        }

        .role-badge {
            font-size: 0.7rem;
            padding: 2px 6px;
        }
    }
</style>

<script>
    // Toggle position breakdown visibility
    function togglePositionBreakdown() {
        const content = document.getElementById('positionBreakdownContent');
        const chevron = document.getElementById('positionBreakdownChevron');
        
        if (content.classList.contains('show')) {
            content.classList.remove('show');
            chevron.className = 'bi bi-chevron-down float-end';
        } else {
            content.classList.add('show');
            chevron.className = 'bi bi-chevron-up float-end';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize page
        let currentWeek = <%= currentWeek %>;
        let currentView = 'league';
        let currentWeekSelected = currentWeek;
        let currentTeamSelected = <%= userTeam ? userTeam.team_id : 'null' %>;
        
        // Event listeners
        document.querySelectorAll('input[name="viewMode"]').forEach(radio => {
            radio.addEventListener('change', function() {
                currentView = this.value;
                toggleViewControls();
                loadScheduleData();
            });
        });
        
        document.getElementById('weekSelect').addEventListener('change', function() {
            currentWeekSelected = parseInt(this.value);
            loadScheduleData();
        });
        
        document.getElementById('teamSelect').addEventListener('change', function() {
            currentTeamSelected = parseInt(this.value);
            loadScheduleData();
        });
        
        // Functions
        function toggleViewControls() {
            const leagueControls = document.getElementById('leagueControls');
            const teamControls = document.getElementById('teamControls');
            
            if (currentView === 'league') {
                leagueControls.classList.remove('d-none');
                teamControls.classList.add('d-none');
            } else {
                leagueControls.classList.add('d-none');
                teamControls.classList.remove('d-none');
            }
        }
        
        function showLoading() {
            document.getElementById('loadingIndicator').classList.remove('d-none');
            document.getElementById('scheduleContent').classList.add('d-none');
            document.getElementById('noDataMessage').classList.add('d-none');
        }
        
        function hideLoading() {
            document.getElementById('loadingIndicator').classList.add('d-none');
            document.getElementById('scheduleContent').classList.remove('d-none');
        }
        
        function showNoData() {
            document.getElementById('loadingIndicator').classList.add('d-none');
            document.getElementById('scheduleContent').classList.add('d-none');
            document.getElementById('noDataMessage').classList.remove('d-none');
        }
        
        function loadScheduleData() {
            showLoading();
            
            const params = new URLSearchParams({
                view: currentView,
                seasonYear: 2025
            });
            
            if (currentView === 'league') {
                params.append('week', currentWeekSelected);
            } else if (currentView === 'team' && currentTeamSelected) {
                params.append('team', currentTeamSelected);
            }
            
            fetch(`/schedule/data?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        renderScheduleData(data);
                    } else {
                        console.error('Error loading schedule:', data.message);
                        showNoData();
                    }
                })
                .catch(error => {
                    console.error('Error fetching schedule:', error);
                    showNoData();
                });
        }
        
        function renderScheduleData(data) {
            const scheduleContent = document.getElementById('scheduleContent');
            const scheduleTitle = document.getElementById('scheduleTitle');
            const currentWeekBadge = document.getElementById('currentWeekBadge');
            
            if (!data.data || data.data.length === 0) {
                showNoData();
                return;
            }
            
            hideLoading();
            
            // Update current week badge with server's current week
            if (data.currentWeek) {
                currentWeekBadge.textContent = `Current Week: ${data.currentWeek}`;
                currentWeek = data.currentWeek; // Update the global variable
            }
            
            if (currentView === 'league') {
                renderLeagueSchedule(data.data, data.week);
                scheduleTitle.textContent = `Week ${data.week} Schedule`;
            } else {
                renderTeamSchedule(data.data);
                const teamName = document.getElementById('teamSelect').selectedOptions[0].text;
                scheduleTitle.textContent = `${teamName} Schedule`;
            }
        }
        
        function renderLeagueSchedule(games, week) {
            const scheduleContent = document.getElementById('scheduleContent');
            const userTeamId = <%= userTeam ? userTeam.team_id : 'null' %>;
            
            // Helper function to check if user's team is in the game
            function isUserGame(game) {
                return userTeamId && (game.team_1.team_id === userTeamId || game.team_2.team_id === userTeamId);
            }
            
            // Separate and sort primary games (user's games first)
            const allPrimaryGames = games.filter(game => game.game_type === 'primary');
            const userPrimaryGames = allPrimaryGames.filter(isUserGame).sort((a, b) => a.schedule_id - b.schedule_id);
            const otherPrimaryGames = allPrimaryGames.filter(game => !isUserGame(game)).sort((a, b) => a.schedule_id - b.schedule_id);
            const primaryGames = [...userPrimaryGames, ...otherPrimaryGames];
            
            // Separate and sort bonus games (user's games first)
            const allBonusGames = games.filter(game => game.game_type === 'bonus');
            const userBonusGames = allBonusGames.filter(isUserGame).sort((a, b) => a.schedule_id - b.schedule_id);
            const otherBonusGames = allBonusGames.filter(game => !isUserGame(game)).sort((a, b) => a.schedule_id - b.schedule_id);
            const bonusGames = [...userBonusGames, ...otherBonusGames];
            
            let html = '<div class="row">';
            
            // Desktop layout: Primary games on left, bonus games on right
            html += '<div class="col-lg-6 d-none d-lg-block">';
            html += '<h6 class="fw-bold text-primary mb-3">Primary Games</h6>';
            primaryGames.forEach(game => {
                html += renderGameCard(game, 'col-12', week, userTeamId);
            });
            html += '</div>';
            
            if (bonusGames.length > 0) {
                html += '<div class="col-lg-6 d-none d-lg-block">';
                html += '<h6 class="fw-bold text-success mb-3">Bonus Games</h6>';
                bonusGames.forEach(game => {
                    html += renderGameCard(game, 'col-12', week, userTeamId);
                });
                html += '</div>';
            }
            
            // Mobile layout: Primary games first, then bonus games
            html += '<div class="d-lg-none">';
            html += '<h6 class="fw-bold text-primary mb-3">Primary Games</h6>';
            primaryGames.forEach(game => {
                html += renderGameCard(game, 'col-12', week, userTeamId, '-mobile');
            });
            if (bonusGames.length > 0) {
                html += '<h6 class="fw-bold text-success mb-3 mt-4">Bonus Games</h6>';
                bonusGames.forEach(game => {
                    html += renderGameCard(game, 'col-12', week, userTeamId, '-mobile');
                });
            }
            html += '</div>';
            
            html += '</div>';
            scheduleContent.innerHTML = html;
        }
        
        function renderGameCard(game, colClass, weekNumber, userTeamId, idSuffix = '') {
            const isCompleted = game.is_completed;
            const isUserGame = userTeamId && (game.team_1.team_id === userTeamId || game.team_2.team_id === userTeamId);
            const hasScore = game.has_manual_score && game.team_1_score !== null && game.team_2_score !== null;
            let resultsContent = '';

            // Use automated completion status from database
            if (game.is_completed) {
                resultsContent = '<span class="fw-bold text-success">Final</span>';
            } else if (game.is_live) {
                resultsContent = '<span class="fw-bold text-warning">Live</span>';
            } else {
                resultsContent = '<span class="fw-bold text-secondary">Upcoming</span>';
            }
            
            // Add highlighting classes for user's games
            const highlightClass = isUserGame ? 'user-game' : '';
            const cardClass = `game-card ${isCompleted ? 'completed' : ''} ${highlightClass}`;
            
            // Generate lineup button if lineups are locked
            let lineupsButton = '';
            if (game.lineups_locked && (game.team_1_lineup || game.team_2_lineup)) {
                lineupsButton = `
                    <div class="mt-2">
                        <button class="btn btn-sm btn-outline-primary" onclick="showGameLineups(${game.schedule_id}, '${idSuffix}')">
                            <i class="bi bi-list-ol"></i> View Lineups
                        </button>
                    </div>
                `;
            }
            
            const team1ScoreClass = hasScore && game.winner === 'team1' ? 'win' : (hasScore && game.winner === 'team2' ? 'loss' : '');
            const team2ScoreClass = hasScore && game.winner === 'team2' ? 'win' : (hasScore && game.winner === 'team1' ? 'loss' : '');

            return `
                <div class="${colClass} mb-3">
                    <div class="${cardClass}" id="game-${game.schedule_id}${idSuffix}">
                        <div class="text-center">
                            <div class="d-flex justify-content-center align-items-stretch">
                                <div class="text-center flex-fill team-section">
                                    <div class="team-info-wrapper">
                                        <div class="team-name ${game.team_1.team_id === userTeamId ? 'user-team' : ''}">${game.team_1.team_name}</div>
                                        <small class="text-muted">${game.team_1.username || ''}</small>
                                    </div>
                                    <div class="team-score-wrapper">
                                        ${hasScore ? `<div class="game-score ${team1ScoreClass}">${game.team_1_score}</div>` : ''}
                                    </div>
                                </div>
                                <div class="vs-separator">vs</div>
                                <div class="text-center flex-fill team-section">
                                    <div class="team-info-wrapper">
                                        <div class="team-name ${game.team_2.team_id === userTeamId ? 'user-team' : ''}">${game.team_2.team_name}</div>
                                        <small class="text-muted">${game.team_2.username || ''}</small>
                                    </div>
                                    <div class="team-score-wrapper">
                                        ${hasScore ? `<div class="game-score ${team2ScoreClass}">${game.team_2_score}</div>` : ''}
                                    </div>
                                </div>
                            </div>
                            <div class="mt-2">${resultsContent}</div>
                            ${lineupsButton}
                        </div>
                        <div class="lineup-display d-none" id="lineup-${game.schedule_id}${idSuffix}">
                            <hr>
                            <div class="row">
                                <div class="col-12 col-md-6 mb-3 mb-md-0">
                                    <h6 class="text-center mb-3">${game.team_1.team_name} Lineup</h6>
                                    <div id="team1-lineup-${game.schedule_id}${idSuffix}"></div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <h6 class="text-center mb-3">${game.team_2.team_name} Lineup</h6>
                                    <div id="team2-lineup-${game.schedule_id}${idSuffix}"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function renderTeamSchedule(games) {
            const scheduleContent = document.getElementById('scheduleContent');
            
            let html = '<div class="table-responsive"><table class="table table-hover">';
            html += `
                <thead class="table-light">
                    <tr>
                        <th style="width: 15%;">Week</th>
                        <th style="width: 45%;">Opponent</th>
                        <th style="width: 20%;">Game Type</th>
                        <th style="width: 20%;">Results</th>
                    </tr>
                </thead>
                <tbody>
            `;
            
            games.forEach(game => {
                let gameTypeContent = '';
                let resultsContent = '';
                
                // Better readable game type styling
                if (game.game_type === 'primary') {
                    gameTypeContent = '<span class="fw-bold text-primary">PRIMARY</span>';
                } else {
                    gameTypeContent = '<span class="fw-bold text-success">BONUS</span>';
                }
                
                // Use automated completion status from database
                if (game.is_completed) {
                    resultsContent = '<span class="fw-bold text-success">Final</span>';
                } else if (game.is_live) {
                    resultsContent = '<span class="fw-bold text-warning">Live</span>';
                } else {
                    resultsContent = '<span class="fw-bold text-secondary">Upcoming</span>';
                }
                
                html += `
                    <tr class="team-schedule-row">
                        <td><span class="week-number">Week ${game.week_number}</span></td>
                        <td><span class="opponent-name">${game.opponent.team_name}</span><br><small class="text-muted">${game.opponent.username || ''}</small></td>
                        <td>${gameTypeContent}</td>
                        <td>${resultsContent}</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table></div>';
            scheduleContent.innerHTML = html;
        }
        
        // Global functions
        window.goToCurrentWeek = function() {
            document.getElementById('weekSelect').value = currentWeek;
            currentWeekSelected = currentWeek;
            loadScheduleData();
        };
        
        // Global function to show/hide game lineups
        window.showGameLineups = function(gameId, idSuffix = '') {
            const lineupDiv = document.getElementById(`lineup-${gameId}${idSuffix}`);
            const button = document.querySelector(`#game-${gameId}${idSuffix} button`);
            
            if (lineupDiv.classList.contains('d-none')) {
                // Show lineups
                lineupDiv.classList.remove('d-none');
                button.innerHTML = '<i class="bi bi-eye-slash"></i> Hide Lineups';
                
                // Populate lineup data
                populateGameLineups(gameId, idSuffix);
            } else {
                // Hide lineups
                lineupDiv.classList.add('d-none');
                button.innerHTML = '<i class="bi bi-list-ol"></i> View Lineups';
            }
        };
        
        // Populate lineup data for a specific game
        function populateGameLineups(gameId, idSuffix = '') {
            // Find the game data
            let gameData = null;
            for (let game of scheduleData.data) {
                if (game.schedule_id === gameId) {
                    gameData = game;
                    break;
                }
            }
            
            if (!gameData) return;
            
            // Populate team 1 lineup
            if (gameData.team_1_lineup) {
                populateTeamLineup(`team1-lineup-${gameId}${idSuffix}`, gameData.team_1_lineup);
            } else {
                document.getElementById(`team1-lineup-${gameId}${idSuffix}`).innerHTML = '<p class="text-muted">No lineup submitted</p>';
            }
            
            // Populate team 2 lineup
            if (gameData.team_2_lineup) {
                populateTeamLineup(`team2-lineup-${gameId}${idSuffix}`, gameData.team_2_lineup);
            } else {
                document.getElementById(`team2-lineup-${gameId}${idSuffix}`).innerHTML = '<p class="text-muted">No lineup submitted</p>';
            }
        }
        
        // Populate individual team lineup
        function populateTeamLineup(containerId, lineupData) {
            const container = document.getElementById(containerId);
            let html = '';
            
            // Head Coach
            if (lineupData.head_coach) {
                const coachTeam = lineupData.head_coach_team ? ` (${lineupData.head_coach_team})` : '';
                html += `
                    <div class="lineup-section mb-3">
                        <h6 class="text-muted mb-2"><i class="bi bi-person-badge"></i> Head Coach</h6>
                        <div class="lineup-player head-coach">
                            <span class="player-name">${lineupData.head_coach}${coachTeam}</span>
                        </div>
                    </div>
                `;
            }
            
            // Position groups with starter requirements
            const positionConfig = {
                quarterback: { name: 'Quarterbacks', starters: 2, icon: 'bi-person-circle' },
                running_back: { name: 'Running Backs', starters: 3, icon: 'bi-person-walking' },
                receiver: { name: 'Receivers', starters: 3, icon: 'bi-person-raised-hand' },
                place_kicker: { name: 'Place Kickers', starters: 1, icon: 'bi-bootstrap' },
                defense: { name: 'Defense', starters: 1, icon: 'bi-shield' }
            };
            
            for (const [position, config] of Object.entries(positionConfig)) {
                const players = lineupData.positions[position] || [];
                html += `
                    <div class="lineup-section mb-3">
                        <h6 class="text-muted mb-2"><i class="${config.icon}"></i> ${config.name}</h6>
                `;

                if (players.length > 0) {
                    players.forEach((player, index) => {
                        const isStarter = index < config.starters;
                        const starterClass = isStarter ? 'starter' : 'backup';
                        const roleText = isStarter ? 'Starter' : 'Backup';

                        html += `
                            <div class="lineup-player ${starterClass}">
                                <div class="player-info">
                                    <span class="player-name">${player.display_name || player.first_name + ' ' + player.last_name}</span>
                                    <span class="player-team">(${player.team_code || ''})</span>
                                </div>
                                <span class="role-badge ${starterClass}-badge">${roleText}</span>
                            </div>
                        `;
                    });
                } else {
                    html += `
                        <div class="lineup-player empty">
                            <span class="text-muted fst-italic">No player selected for this position</span>
                        </div>
                    `;
                }

                html += '</div>';
            }
            
            container.innerHTML = html;
        }
        
        // Store schedule data for lineup display
        let scheduleData = null;
        
        // Modify loadScheduleData to store the data
        const originalRenderScheduleData = renderScheduleData;
        renderScheduleData = function(data) {
            scheduleData = data;
            originalRenderScheduleData(data);
        };
        
        // Load initial data
        loadScheduleData();
    });
</script>