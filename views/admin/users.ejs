<!-- Page Header -->
<div class="row align-items-center mb-4">
    <div class="col-md-8">
        <h1 class="mb-0">User Management</h1>
        <p class="text-muted">Manage league users and their permissions</p>
    </div>
    <div class="col-md-4 text-md-end">
        <button class="btn btn-primary">
            <i class="bi bi-person-plus"></i> Add User
        </button>
    </div>
</div>

<!-- User Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-people display-4 text-primary"></i>
                <h5 class="card-title mt-3">Total Users</h5>
                <h3 class="text-primary"><%= stats.total_users %></h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-check-circle display-4 text-success"></i>
                <h5 class="card-title mt-3">Active (30d)</h5>
                <h3 class="text-success"><%= stats.active_users %></h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-shield-check display-4 text-warning"></i>
                <h5 class="card-title mt-3">Admins</h5>
                <h3 class="text-warning"><%= stats.admin_users %></h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-clock display-4 text-info"></i>
                <h5 class="card-title mt-3">Last 7 Days</h5>
                <h3 class="text-info"><%= stats.recent_active %></h3>
            </div>
        </div>
    </div>
</div>

<!-- User Management Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">All Users</h5>
        <div class="input-group" style="width: 300px;">
            <input type="text" class="form-control" placeholder="Search users...">
            <button class="btn btn-outline-secondary">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Team</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Status</th>
                        <th>Last Login</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (users && users.length > 0) { %>
                        <% users.forEach(function(userRow) { %>
                            <tr data-user-id="<%= userRow.user_id %>">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar bg-<%= userRow.is_admin ? 'warning' : 'primary' %> text-white rounded-circle me-3" style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                                            <%= (userRow.first_name ? userRow.first_name.charAt(0) : '') + (userRow.last_name ? userRow.last_name.charAt(0) : userRow.username.charAt(0)) %>
                                        </div>
                                        <div>
                                            <strong><%= (userRow.first_name && userRow.last_name) ? userRow.first_name + ' ' + userRow.last_name : userRow.username %></strong>
                                            <br><small class="text-muted">@<%= userRow.username %></small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <% if (userRow.team_name) { %>
                                        <a href="/teams/<%= userRow.team_id %>" class="text-decoration-none">
                                            <span class="badge bg-success"><%= userRow.team_name %></span>
                                        </a>
                                    <% } else { %>
                                        <span class="text-muted">No team</span>
                                    <% } %>
                                </td>
                                <td><%= userRow.email %></td>
                                <td>
                                    <span class="badge bg-<%= userRow.is_admin ? 'warning' : 'secondary' %>">
                                        <%= userRow.is_admin ? 'Admin' : 'User' %>
                                    </span>
                                </td>
                                <td>
                                    <% if (userRow.is_active) { %>
                                        <span class="badge bg-success">Active</span>
                                    <% } else { %>
                                        <span class="badge bg-danger">Disabled</span>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (userRow.last_login) { %>
                                        <%= new Date(userRow.last_login).toLocaleDateString() %>
                                    <% } else { %>
                                        <span class="text-muted">Never</span>
                                    <% } %>
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-outline-primary" title="Edit User" 
                                                data-bs-toggle="modal" data-bs-target="#editUserModal"
                                                onclick="prepareEditUser(<%= userRow.user_id %>)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-info" title="Login History" 
                                                data-bs-toggle="modal" data-bs-target="#loginHistoryModal"
                                                onclick="prepareLoginHistory(<%= userRow.user_id %>)">
                                            <i class="bi bi-clock-history"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" title="Activity Log" 
                                                data-bs-toggle="modal" data-bs-target="#activityModal"
                                                onclick="prepareActivity(<%= userRow.user_id %>)">
                                            <i class="bi bi-list-task"></i>
                                        </button>
                                        <% if (userRow.user_id !== user.id) { %>
                                            <button class="btn btn-sm btn-outline-warning" title="Toggle Admin" onclick="toggleAdmin(<%= userRow.user_id %>, <%= !userRow.is_admin %>)">
                                                <i class="bi bi-shield<%= userRow.is_admin ? '-check' : '' %>"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-<%= userRow.is_active ? 'danger' : 'success' %>" title="<%= userRow.is_active ? 'Disable' : 'Enable' %> User" onclick="toggleUserStatus(<%= userRow.user_id %>, <%= !userRow.is_active %>)">
                                                <i class="bi bi-<%= userRow.is_active ? 'person-x' : 'person-check' %>"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" title="Reset Password" 
                                                    data-bs-toggle="modal" data-bs-target="#resetPasswordModal"
                                                    onclick="preparePasswordReset(<%= userRow.user_id %>)">
                                                <i class="bi bi-key"></i>
                                            </button>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center text-muted py-4">
                                No users found
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="editUserId">
                    <div class="mb-3">
                        <label for="editFirstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="editFirstName">
                    </div>
                    <div class="mb-3">
                        <label for="editLastName" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="editLastName">
                    </div>
                    <div class="mb-3">
                        <label for="editUsername" class="form-label">Username</label>
                        <input type="text" class="form-control" id="editUsername" required>
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editEmail" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveUserEdit()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Reset Password Modal -->
<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i>
                    This will reset the user's password. They will need to use the new password to log in.
                </div>
                <form id="resetPasswordForm">
                    <input type="hidden" id="resetUserId">
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" required minlength="6">
                        <div class="form-text">Password must be at least 6 characters long.</div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="savePasswordReset()">Reset Password</button>
            </div>
        </div>
    </div>
</div>

<!-- Login History Modal -->
<div class="modal fade" id="loginHistoryModal" tabindex="-1" aria-labelledby="loginHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginHistoryModalLabel">Login History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loginHistoryContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Activity Log Modal -->
<div class="modal fade" id="activityModal" tabindex="-1" aria-labelledby="activityModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="activityModalLabel">User Activity</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="activityContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Prepare edit user data (called before modal opens)
function prepareEditUser(userId) {
    try {
        // Get user data from the table row
        const row = document.querySelector(`tr[data-user-id="${userId}"]`);
        if (!row) {
            showAlert('danger', 'User not found');
            return false;
        }
        
        const userData = getUserDataFromRow(row);
        
        // Populate modal fields
        document.getElementById('editUserId').value = userId;
        document.getElementById('editFirstName').value = userData.firstName || '';
        document.getElementById('editLastName').value = userData.lastName || '';
        document.getElementById('editUsername').value = userData.username || '';
        document.getElementById('editEmail').value = userData.email || '';
        
        return true;
    } catch (error) {
        console.error('Error preparing edit modal:', error);
        showAlert('danger', 'Error preparing edit dialog');
        return false;
    }
}

// Legacy function for backwards compatibility
function editUser(userId) {
    prepareEditUser(userId);
    // Let Bootstrap handle the modal opening
}

function getUserDataFromRow(row) {
    const cells = row.querySelectorAll('td');
    const strongElement = cells[0].querySelector('strong');
    const smallElement = cells[0].querySelector('small');
    
    const nameText = strongElement ? strongElement.textContent.trim() : '';
    const usernameText = smallElement ? smallElement.textContent.replace('@', '').trim() : '';
    const email = cells[2] ? cells[2].textContent.trim() : '';
    
    // Try to parse first and last name from full name
    const nameParts = nameText.split(' ');
    const firstName = nameParts[0] || '';
    const lastName = nameParts.slice(1).join(' ') || '';
    
    return {
        username: usernameText,
        email: email,
        firstName: firstName,
        lastName: lastName,
        fullName: nameText
    };
}

function saveUserEdit() {
    const userId = document.getElementById('editUserId').value;
    const formData = {
        firstName: document.getElementById('editFirstName').value,
        lastName: document.getElementById('editLastName').value,
        username: document.getElementById('editUsername').value,
        email: document.getElementById('editEmail').value
    };

    fetch(`/admin/users/${userId}/update-profile`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('danger', 'An error occurred while updating the user');
    });
}

// Prepare password reset data (called before modal opens)
function preparePasswordReset(userId) {
    try {
        document.getElementById('resetUserId').value = userId;
        document.getElementById('newPassword').value = '';
        document.getElementById('confirmPassword').value = '';
        return true;
    } catch (error) {
        console.error('Error preparing password reset modal:', error);
        showAlert('danger', 'Error preparing password reset dialog');
        return false;
    }
}

// Legacy function for backwards compatibility
function resetPassword(userId) {
    preparePasswordReset(userId);
    // Let Bootstrap handle the modal opening
}

function savePasswordReset() {
    const userId = document.getElementById('resetUserId').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    if (newPassword !== confirmPassword) {
        showAlert('danger', 'Passwords do not match');
        return;
    }

    if (newPassword.length < 6) {
        showAlert('danger', 'Password must be at least 6 characters long');
        return;
    }

    fetch(`/admin/users/${userId}/reset-password`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newPassword })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('resetPasswordModal')).hide();
            showAlert('success', data.message);
        } else {
            showAlert('danger', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('danger', 'An error occurred while resetting the password');
    });
}

// Toggle admin status
function toggleAdmin(userId, makeAdmin) {
    const action = makeAdmin ? 'grant' : 'revoke';
    if (!confirm(`Are you sure you want to ${action} admin privileges for this user?`)) {
        return;
    }

    fetch(`/admin/users/${userId}/toggle-admin`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isAdmin: makeAdmin })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('danger', 'An error occurred while updating admin status');
    });
}

function toggleUserStatus(userId, makeActive) {
    const action = makeActive ? 'enable' : 'disable';
    if (!confirm(`Are you sure you want to ${action} this user account?`)) {
        return;
    }

    fetch(`/admin/users/${userId}/toggle-status`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive: makeActive })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('danger', 'An error occurred while updating user status');
    });
}

// Prepare login history (called before modal opens)
function prepareLoginHistory(userId) {
    // Store userId for when modal opens
    window.currentUserId = userId;
    return true;
}

// Load login history data when modal is shown
function loadLoginHistoryData() {
    const userId = window.currentUserId;
    if (!userId) return;
    
    // Reset content to loading state
    document.getElementById('loginHistoryContent').innerHTML = `
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;

    fetch(`/admin/users/${userId}/login-history`)
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            displayLoginHistory(data.loginHistory);
        } else {
            document.getElementById('loginHistoryContent').innerHTML = 
                '<div class="alert alert-danger">Error loading login history: ' + (data.message || 'Unknown error') + '</div>';
        }
    })
    .catch(error => {
        console.error('Error:', error);
        document.getElementById('loginHistoryContent').innerHTML = 
            '<div class="alert alert-danger">An error occurred while loading login history</div>';
    });
}

// Legacy function for backwards compatibility
function viewLoginHistory(userId) {
    prepareLoginHistory(userId);
    // Let Bootstrap handle the modal opening
}

function displayLoginHistory(history) {
    let html = '';
    if (history.length === 0) {
        html = '<div class="text-center text-muted">No login history found</div>';
    } else {
        html = '<div class="table-responsive"><table class="table table-sm">';
        html += '<thead><tr><th>Date/Time</th><th>Status</th><th>IP Address</th></tr></thead><tbody>';
        
        history.forEach(entry => {
            const date = new Date(entry.login_time).toLocaleString();
            const statusBadge = entry.login_status === 'Success' ? 
                '<span class="badge bg-success">Success</span>' : 
                '<span class="badge bg-danger">Failed</span>';
            
            html += `<tr>
                <td>${date}</td>
                <td>${statusBadge}</td>
                <td>${entry.ip_address || 'N/A'}</td>
            </tr>`;
        });
        
        html += '</tbody></table></div>';
    }
    
    document.getElementById('loginHistoryContent').innerHTML = html;
}

// Prepare activity logs (called before modal opens)
function prepareActivity(userId) {
    // Store userId for when modal opens
    window.currentActivityUserId = userId;
    return true;
}

// Load activity data when modal is shown
function loadActivityData() {
    const userId = window.currentActivityUserId;
    if (!userId) return;
    
    // Reset content to loading state
    document.getElementById('activityContent').innerHTML = `
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;

    fetch(`/admin/users/${userId}/activity`)
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            displayActivity(data.activityLogs);
        } else {
            document.getElementById('activityContent').innerHTML = 
                '<div class="alert alert-danger">Error loading activity logs: ' + (data.message || 'Unknown error') + '</div>';
        }
    })
    .catch(error => {
        console.error('Error:', error);
        document.getElementById('activityContent').innerHTML = 
            '<div class="alert alert-danger">An error occurred while loading activity logs</div>';
    });
}

// Legacy function for backwards compatibility
function viewActivity(userId) {
    prepareActivity(userId);
    // Let Bootstrap handle the modal opening
}

function displayActivity(activities) {
    let html = '';
    if (activities.length === 0) {
        html = '<div class="text-center text-muted">No activity found</div>';
    } else {
        html = '<div class="table-responsive"><table class="table table-sm">';
        html += '<thead><tr><th>Date/Time</th><th>Action</th><th>Details</th></tr></thead><tbody>';
        
        activities.forEach(activity => {
            const date = new Date(activity.created_at).toLocaleString();
            
            html += `<tr>
                <td>${date}</td>
                <td><span class="badge bg-secondary">${activity.action_type}</span></td>
                <td>${activity.details || 'N/A'}</td>
            </tr>`;
        });
        
        html += '</tbody></table></div>';
    }
    
    document.getElementById('activityContent').innerHTML = html;
}

// Alert helper function
function showAlert(type, message) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    // Insert alert at the top of the page
    let container = document.querySelector('.container-fluid');
    if (!container) {
        container = document.querySelector('.container');
    }
    if (!container) {
        container = document.body;
    }
    
    if (container) {
        container.insertAdjacentHTML('afterbegin', alertHtml);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const alert = container.querySelector('.alert');
            if (alert) {
                try {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                } catch (e) {
                    alert.remove();
                }
            }
        }, 5000);
    } else {
        // Fallback to console if we can't find a container
        console.log(`${type.toUpperCase()}: ${message}`);
        alert(message);
    }
}

// Search functionality
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.querySelector('input[placeholder="Search users..."]');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr[data-user-id]');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });
    }
    
    
    // Add event listeners for modal shown events
    const loginHistoryModal = document.getElementById('loginHistoryModal');
    if (loginHistoryModal) {
        loginHistoryModal.addEventListener('shown.bs.modal', loadLoginHistoryData);
    }
    
    const activityModal = document.getElementById('activityModal');
    if (activityModal) {
        activityModal.addEventListener('shown.bs.modal', loadActivityData);
    }
    
});
</script>

<style>
/* Custom modal system - override Bootstrap modals for z-index compatibility */
.modal.show {
    z-index: 999999 !important;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    background: transparent !important;
    display: block !important;
}

.modal-backdrop {
    display: none !important;
}

.modal.show .modal-dialog {
    z-index: 999998 !important;
    position: fixed !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    margin: 0 !important;
    pointer-events: auto !important;
    width: auto !important;
    max-width: 90vw !important;
}

.modal.show .modal-content {
    z-index: 999997 !important;
    pointer-events: auto !important;
    position: relative !important;
    background: white !important;
    border: 1px solid rgba(0,0,0,.2) !important;
    border-radius: 0.375rem !important;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15) !important;
    padding: 0 !important;
    overflow: hidden !important;
}

.modal.show * {
    pointer-events: auto !important;
    position: relative !important;
}

.modal.show input,
.modal.show button,
.modal.show select,
.modal.show textarea,
.modal.show .btn,
.modal.show .form-control {
    pointer-events: auto !important;
    cursor: pointer !important;
}

/* Custom backdrop */
.modal.show::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999990;
}
</style>