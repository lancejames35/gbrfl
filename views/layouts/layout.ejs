<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'GBRFL' %> | GBRFL</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/sidebar.css">
    <!-- Add retro theme CSS -->
    <link rel="stylesheet" href="/css/retro-theme.css">
    <!-- Page specific styles -->
    <% if (typeof head !== 'undefined') { %>
        <%- head %>
    <% } %>
</head>
<body>
    <!-- Include header partial -->
    <%- include('../partials/header') %>
        
    <!-- Include sidebar partial only if user is logged in -->
    <% if (locals.user && user) { %>
    <%- include('../partials/sidebar', { activePage: typeof activePage !== 'undefined' ? activePage : '' }) %>
    <% } %>
    
    <!-- Main content with margin for sidebar -->
    <main class="main-content <%= locals.user && user ? '' : 'no-sidebar' %>">
        <div class="container my-4">
            <!-- Flash Messages -->
            <% if(typeof success_msg !== 'undefined' && success_msg.length > 0) { %>
                <div class="alert alert-success">
                    <%= success_msg %>
                </div>
            <% } %>

            <% if(typeof error_msg !== 'undefined' && error_msg.length > 0) { %>
                <div class="alert alert-danger">
                    <%= error_msg %>
                </div>
            <% } %>
            
            <!-- Page content goes here -->
            <%- body %>
        </div>
    </main>

    <footer class="bg-dark text-white py-3 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <p class="mb-0">&copy; <%= new Date().getFullYear() %> George Blanda Rotisserie Football League</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p class="mb-0">
                        <a href="/privacy" class="text-white me-3">Privacy Policy</a>
                        <a href="/terms" class="text-white">Terms of Use</a>
                    </p>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/sidebar.js"></script>
    <script src="/js/main.js"></script>
    <!-- Add theme toggle JavaScript -->
    <script src="/js/theme-toggle.js"></script>
    
    <!-- Admin user switching functionality -->
    <script>
        // Admin user switching functions (available globally)
        function switchToUserSafe(element) {
            const userId = element.getAttribute('data-user-id');
            const userName = element.getAttribute('data-user-name');
            const teamName = element.getAttribute('data-team-name');
            
            const displayName = teamName && teamName !== 'No Team' ? 
                `${userName} (${teamName})` : userName;
            
            if (!confirm(`Switch to user: ${displayName}?`)) return;
            
            fetch('/admin/switch-user', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ targetUserId: parseInt(userId) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Refresh to show new user perspective
                } else {
                    alert(`Error switching user: ${data.message}`);
                }
            })
            .catch(error => {
                console.error('Switch user error:', error);
                alert('Error switching user');
            });
        }

        function switchBackToAdmin() {
            if (!confirm('Switch back to admin account?')) return;
            
            fetch('/admin/switch-back', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Refresh to show admin perspective
                } else {
                    alert(`Error switching back: ${data.message}`);
                }
            })
            .catch(error => {
                console.error('Switch back error:', error);
                alert('Error switching back');
            });
        }

        // User switching submenu functionality
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing user switching submenu...');
            
            const submenuToggle = document.getElementById('switchUserToggle');
            const submenuDropdown = document.getElementById('userSwitchSubmenu');
            const arrow = document.getElementById('switchUserArrow');
            
            console.log('Elements found:', {
                toggle: !!submenuToggle,
                dropdown: !!submenuDropdown,
                arrow: !!arrow
            });
            
            if (submenuToggle && submenuDropdown) {
                let isHoverMode = false;
                let isMobileMenuOpen = false;
                
                // Function to check if we're on mobile
                function isMobile() {
                    return window.innerWidth <= 768;
                }
                
                // Function to check if device supports hover
                function supportsHover() {
                    return window.matchMedia('(hover: hover)').matches;
                }
                
                // Click handler for submenu toggle
                submenuToggle.addEventListener('click', function(e) {
                    console.log('Switch User clicked! Mobile:', isMobile());
                    e.preventDefault();
                    e.stopPropagation();
                    
                    if (isMobile()) {
                        // Mobile behavior: always toggle and stay open until explicitly closed
                        isMobileMenuOpen = !isMobileMenuOpen;
                        
                        if (isMobileMenuOpen) {
                            submenuDropdown.style.display = 'block';
                            console.log('Opening mobile submenu');
                            // Re-add touch handlers after opening
                            setTimeout(() => addMobileTouchHandlers(), 100);
                        } else {
                            submenuDropdown.style.display = 'none';
                            console.log('Closing mobile submenu');
                        }
                    } else {
                        // Desktop behavior: toggle visibility
                        const isVisible = submenuDropdown.style.display === 'block';
                        if (isVisible) {
                            submenuDropdown.style.display = 'none';
                            if (arrow) arrow.classList.remove('rotated');
                            console.log('Hiding desktop submenu');
                        } else {
                            submenuDropdown.style.display = 'block';
                            if (arrow) arrow.classList.add('rotated');
                            console.log('Showing desktop submenu');
                        }
                    }
                    
                    isHoverMode = false; // Disable hover mode after click
                });
                
                // Handle hover for desktop only (not mobile)
                if (supportsHover()) {
                    submenuToggle.parentElement.addEventListener('mouseenter', function() {
                        if (!isMobile() && !isHoverMode) {
                            setTimeout(() => {
                                if (submenuDropdown.style.display !== 'block') {
                                    submenuDropdown.style.display = 'block';
                                    if (arrow) arrow.classList.add('rotated');
                                    isHoverMode = true;
                                }
                            }, 100); // Small delay to prevent accidental triggers
                        }
                    });
                    
                    submenuToggle.parentElement.addEventListener('mouseleave', function() {
                        if (!isMobile() && isHoverMode) {
                            setTimeout(() => {
                                if (!submenuDropdown.matches(':hover')) {
                                    submenuDropdown.style.display = 'none';
                                    if (arrow) arrow.classList.remove('rotated');
                                    isHoverMode = false;
                                }
                            }, 300); // Delay to allow moving to submenu
                        }
                    });
                    
                    // Keep submenu open when hovering over it (desktop only)
                    submenuDropdown.addEventListener('mouseleave', function() {
                        if (!isMobile() && isHoverMode) {
                            setTimeout(() => {
                                submenuDropdown.style.display = 'none';
                                if (arrow) arrow.classList.remove('rotated');
                                isHoverMode = false;
                            }, 100);
                        }
                    });
                }
                
                // Close submenu when clicking outside (but be more careful on mobile)
                document.addEventListener('click', function(e) {
                    if (!submenuToggle.parentElement.contains(e.target)) {
                        submenuDropdown.style.display = 'none';
                        if (arrow) arrow.classList.remove('rotated');
                        isHoverMode = false;
                        isMobileMenuOpen = false;
                    }
                });
                
                // Prevent submenu from closing when clicking inside it
                submenuDropdown.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
                
                // Function to add touch event handling for mobile submenu items
                function addMobileTouchHandlers() {
                    if (isMobile()) {
                        console.log('Adding mobile touch event handlers');
                        
                        // Add touch feedback for all submenu items
                        const submenuItems = submenuDropdown.querySelectorAll('.submenu-item');
                        submenuItems.forEach(item => {
                            // Remove any existing touch handlers first
                            item.removeEventListener('touchstart', item._touchStartHandler);
                            item.removeEventListener('touchend', item._touchEndHandler);
                            item.removeEventListener('touchcancel', item._touchCancelHandler);
                            
                            // Touch start feedback
                            item._touchStartHandler = function(e) {
                                console.log('Touch start on:', this.textContent.trim());
                                this.style.backgroundColor = '#007bff';
                                this.style.color = '#fff';
                            };
                            
                            // Touch end cleanup
                            item._touchEndHandler = function(e) {
                                const self = this;
                                console.log('Touch end on:', this.textContent.trim());
                                // Small delay to show visual feedback
                                setTimeout(() => {
                                    if (!self.matches(':hover')) {
                                        self.style.backgroundColor = '';
                                        self.style.color = '';
                                    }
                                }, 150);
                            };
                            
                            // Touch cancel cleanup
                            item._touchCancelHandler = function(e) {
                                console.log('Touch cancel on:', this.textContent.trim());
                                this.style.backgroundColor = '';
                                this.style.color = '';
                            };
                            
                            item.addEventListener('touchstart', item._touchStartHandler, { passive: true });
                            item.addEventListener('touchend', item._touchEndHandler, { passive: true });
                            item.addEventListener('touchcancel', item._touchCancelHandler, { passive: true });
                        });
                    }
                }
                
                // Add touch handlers initially
                addMobileTouchHandlers();
                
                // Handle window resize to reset mobile state
                window.addEventListener('resize', function() {
                    if (isMobile()) {
                        // Reset hover mode on mobile
                        isHoverMode = false;
                        if (arrow) arrow.classList.remove('rotated');
                    } else {
                        // Reset mobile state on desktop
                        isMobileMenuOpen = false;
                    }
                });
                
                console.log('User switching submenu functionality loaded successfully');
            } else {
                console.log('User switching elements not found - user may not be admin');
            }
        });
    </script>
    
    <!-- Notifications JavaScript -->
    <script src="/js/notifications.js"></script>
    
    <!-- Admin Clock JavaScript -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const clockElement = document.getElementById('admin-clock');
        const timezoneElement = document.getElementById('admin-timezone');
        
        if (clockElement && timezoneElement) {
            // Function to update the clock
            function updateClock() {
                const now = new Date();
                
                // Format time with seconds
                const timeString = now.toLocaleString('en-US', {
                    hour12: false,
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric'
                });
                
                clockElement.textContent = timeString;
                
                // Get timezone info
                const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                const offset = now.getTimezoneOffset();
                const offsetHours = Math.floor(Math.abs(offset) / 60);
                const offsetMinutes = Math.abs(offset) % 60;
                const offsetSign = offset <= 0 ? '+' : '-';
                
                timezoneElement.innerHTML = `
                    ${timezone}<br>
                    <small>UTC${offsetSign}${offsetHours.toString().padStart(2, '0')}:${offsetMinutes.toString().padStart(2, '0')}</small>
                `;
            }
            
            // Update immediately and then every second
            updateClock();
            setInterval(updateClock, 1000);
            
            // Fetch server timezone info
            fetch('/api/server-time')
                .then(response => response.json())
                .then(data => {
                    if (data.serverTime && data.serverTimezone) {
                        const serverTime = new Date(data.serverTime);
                        const timeDiff = Math.abs(new Date().getTime() - serverTime.getTime());
                        
                        if (timeDiff > 5000) { // More than 5 seconds difference
                            timezoneElement.innerHTML += `<br><small class="text-warning">⚠️ Server time differs by ${Math.round(timeDiff/1000)}s</small>`;
                        }
                        
                        // Show server timezone if different from client
                        if (data.serverTimezone !== Intl.DateTimeFormat().resolvedOptions().timeZone) {
                            timezoneElement.innerHTML += `<br><small class="text-info">Server: ${data.serverTimezone}</small>`;
                        }
                    }
                })
                .catch(error => {
                    console.log('Could not fetch server time info:', error);
                });
        }
    });
    </script>
</body>
</html>