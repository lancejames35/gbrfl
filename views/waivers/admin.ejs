<!-- Page Header -->
<div class="row align-items-center mb-4">
    <div class="col-md-8">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-2">
                <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/admin">Admin</a></li>
                <li class="breadcrumb-item active" aria-current="page">Waiver Requests</li>
            </ol>
        </nav>
        <h1 class="mb-0">
            <i class="bi bi-gavel"></i> Two-Round Waiver Approvals
        </h1>
    </div>
    <div class="col-md-4 text-md-end">
        <% 
        const firstRoundRequests = requests.filter(r => r.waiver_round === '1st');
        const secondRoundRequests = requests.filter(r => r.waiver_round === '2nd');
        %>
        <span class="badge bg-primary me-2">1st: <%= firstRoundRequests.length %></span>
        <span class="badge bg-warning text-dark me-2">2nd: <%= secondRoundRequests.length %></span>
        <span class="badge bg-info">Total: <%= requests.length %></span>
    </div>
</div>

<% if (requests.length === 0) { %>
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="text-center py-5">
                        <i class="bi bi-clipboard-check display-1 text-muted mb-3"></i>
                        <h5 class="text-muted">No pending waiver requests</h5>
                        <p class="text-muted">All caught up! No waiver requests need your attention.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
<% } else { %>

<!-- 1st Round Waiver Requests -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="bi bi-1-circle me-2"></i>1st Round Waiver Requests (<%= firstRoundRequests.length %>)
                </h5>
            </div>
            
            <div class="card-body">
                <% if (firstRoundRequests.length === 0) { %>
                    <div class="text-center text-muted py-4">
                        <i class="bi bi-inbox display-6"></i>
                        <p class="mt-2 mb-0">No 1st round waiver requests</p>
                    </div>
                <% } else { %>
                    <%- renderWaiverRequestsTable(firstRoundRequests, '1st') %>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- 2nd Round Waiver Requests -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0">
                    <i class="bi bi-2-circle me-2"></i>2nd Round Waiver Requests (<%= secondRoundRequests.length %>)
                </h5>
            </div>
            
            <div class="card-body">
                <% if (secondRoundRequests.length === 0) { %>
                    <div class="text-center text-muted py-4">
                        <i class="bi bi-inbox display-6"></i>
                        <p class="mt-2 mb-0">No 2nd round waiver requests</p>
                    </div>
                <% } else { %>
                    <%- renderWaiverRequestsTable(secondRoundRequests, '2nd') %>
                <% } %>
            </div>
        </div>
    </div>
</div>

<% 
function renderWaiverRequestsTable(roundRequests, roundName) {
    let html = '';
    
    // Desktop Table View
    html += '<div class="table-responsive d-none d-lg-block">';
    html += '<table class="table table-hover">';
    html += '<thead class="table-light">';
    html += '<tr>';
    html += '<th>Submitted</th>';
    html += '<th>Transaction</th>';
    html += '<th>Priority</th>';
    html += '<th>Actions</th>';
    html += '</tr>';
    html += '</thead>';
    html += '<tbody>';
    
    let currentTeam = '';
    roundRequests.forEach(function(request, index) {
        // Add team separator row
        if (request.team_name !== currentTeam) {
            currentTeam = request.team_name;
            html += '<tr class="table-secondary team-separator">';
            html += '<td colspan="4" class="py-2">';
            html += '<strong><i class="bi bi-people-fill me-2"></i>' + request.team_name + '</strong>';
            html += '<small class="text-muted ms-2">(' + request.first_name + ' ' + request.last_name + ')</small>';
            html += '</td>';
            html += '</tr>';
        }
        
        html += '<tr id="request-' + request.request_id + '">';
        html += '<td>';
        html += '<small class="text-muted">';
        html += new Date(request.submitted_at).toLocaleDateString() + '<br>';
        html += new Date(request.submitted_at).toLocaleTimeString();
        html += '</small>';
        html += '</td>';
        html += '<td>';
        html += '<div class="transaction-details">';
        html += '<div class="pickup mb-1">';
        html += '<i class="bi bi-plus text-success me-1"></i>';
        html += '<strong>Pick up:</strong> ' + request.pickup_name;
        html += '<span class="badge bg-primary ms-1">' + request.pickup_position + '</span>';
        if (request.pickup_team) {
            html += '<span class="badge bg-secondary ms-1">' + request.pickup_team + '</span>';
        }
        html += '</div>';
        html += '<div class="drop">';
        html += '<i class="bi bi-dash text-danger me-1"></i>';
        html += '<strong>Drop:</strong> ' + request.drop_name;
        html += '<span class="badge bg-primary ms-1">' + request.drop_position + '</span>';
        if (request.drop_team) {
            html += '<span class="badge bg-secondary ms-1">' + request.drop_team + '</span>';
        }
        html += '</div>';
        html += '</div>';
        html += '</td>';
        html += '<td>';
        html += '<div class="text-center">';
        html += '<span class="badge bg-secondary me-2">' + roundName + '</span><br>';
        html += '<span class="badge bg-info">#' + request.request_order + '</span>';
        html += '<br><small class="text-muted">Team Priority</small>';
        html += '</div>';
        html += '</td>';
        html += '<td>';
        html += '<div class="btn-group" role="group">';
        html += '<button type="button" class="btn btn-success btn-sm approve-btn"';
        html += ' data-request-id="' + request.request_id + '"';
        html += ' data-team-name="' + request.team_name + '"';
        html += ' data-pickup-name="' + request.pickup_name + '"';
        html += ' data-drop-name="' + request.drop_name + '">';
        html += '<i class="bi bi-check"></i> Approve';
        html += '</button>';
        html += '<button type="button" class="btn btn-danger btn-sm reject-btn"';
        html += ' data-request-id="' + request.request_id + '"';
        html += ' data-team-name="' + request.team_name + '"';
        html += ' data-pickup-name="' + request.pickup_name + '"';
        html += ' data-drop-name="' + request.drop_name + '">';
        html += '<i class="bi bi-x"></i> Reject';
        html += '</button>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
    });
    
    html += '</tbody>';
    html += '</table>';
    html += '</div>';
    
    // Mobile Card View
    html += '<div class="d-lg-none">';
    roundRequests.forEach(function(request, index) {
        html += '<div class="card mb-3 mobile-request-card" id="mobile-request-' + request.request_id + '">';
        html += '<div class="card-body">';
        html += '<div class="row">';
        html += '<div class="col-6">';
        html += '<h6 class="card-title mb-1"><strong>' + request.team_name + '</strong></h6>';
        html += '<small class="text-muted">' + request.first_name + ' ' + request.last_name + '</small>';
        html += '</div>';
        html += '<div class="col-6 text-end">';
        html += '<span class="badge bg-secondary me-1">' + roundName + '</span>';
        html += '<span class="badge bg-info mb-1">Priority #' + request.request_order + '</span><br>';
        html += '<small class="text-muted">' + new Date(request.submitted_at).toLocaleDateString() + '</small>';
        html += '</div>';
        html += '</div>';
        html += '<hr class="my-2">';
        html += '<div class="transaction-mobile">';
        html += '<div class="pickup-mobile mb-2">';
        html += '<div class="d-flex align-items-center">';
        html += '<i class="bi bi-plus-circle text-success me-2"></i>';
        html += '<strong class="text-success">PICK UP</strong>';
        html += '</div>';
        html += '<div class="player-info ms-4">';
        html += '<div class="fw-bold">' + request.pickup_name + '</div>';
        html += '<div>';
        html += '<span class="badge bg-primary me-1">' + request.pickup_position + '</span>';
        if (request.pickup_team) {
            html += '<span class="badge bg-secondary">' + request.pickup_team + '</span>';
        }
        html += '</div>';
        html += '</div>';
        html += '</div>';
        html += '<div class="drop-mobile mb-3">';
        html += '<div class="d-flex align-items-center">';
        html += '<i class="bi bi-dash-circle text-danger me-2"></i>';
        html += '<strong class="text-danger">DROP</strong>';
        html += '</div>';
        html += '<div class="player-info ms-4">';
        html += '<div class="fw-bold">' + request.drop_name + '</div>';
        html += '<div>';
        html += '<span class="badge bg-primary me-1">' + request.drop_position + '</span>';
        if (request.drop_team) {
            html += '<span class="badge bg-secondary">' + request.drop_team + '</span>';
        }
        html += '</div>';
        html += '</div>';
        html += '</div>';
        html += '</div>';
        html += '<div class="d-grid gap-2 d-md-flex">';
        html += '<button type="button" class="btn btn-success btn-sm approve-btn flex-fill"';
        html += ' data-request-id="' + request.request_id + '"';
        html += ' data-team-name="' + request.team_name + '"';
        html += ' data-pickup-name="' + request.pickup_name + '"';
        html += ' data-drop-name="' + request.drop_name + '">';
        html += '<i class="bi bi-check-lg"></i> Approve';
        html += '</button>';
        html += '<button type="button" class="btn btn-outline-danger btn-sm reject-btn flex-fill"';
        html += ' data-request-id="' + request.request_id + '"';
        html += ' data-team-name="' + request.team_name + '"';
        html += ' data-pickup-name="' + request.pickup_name + '"';
        html += ' data-drop-name="' + request.drop_name + '">';
        html += '<i class="bi bi-x-lg"></i> Reject';
        html += '</button>';
        html += '</div>';
        html += '</div>';
        html += '</div>';
    });
    html += '</div>';
    
    return html;
}
%>

<% } %>

<!-- Reject Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Waiver Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to reject this waiver request?</p>
                <div id="reject-details"></div>
                <div class="mb-3 mt-3">
                    <label for="rejection-notes" class="form-label">Rejection Notes (optional):</label>
                    <textarea class="form-control" 
                              id="rejection-notes" 
                              rows="3" 
                              placeholder="Enter reason for rejection..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-reject">
                    <i class="bi bi-x"></i> Reject Request
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentRequestId = null;

    // Approve request
    document.querySelectorAll('.approve-btn').forEach(function(btn) {
        btn.addEventListener('click', function() {
            const requestId = this.getAttribute('data-request-id');
            const teamName = this.getAttribute('data-team-name');
            const pickupName = this.getAttribute('data-pickup-name');
            const dropName = this.getAttribute('data-drop-name');
            
            if (confirm(`Approve waiver request for ${teamName}?\n\nPick up: ${pickupName}\nDrop: ${dropName}`)) {
                fetch(`/waivers/admin/${requestId}/approve`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove both desktop and mobile versions
                        const desktopRow = document.getElementById(`request-${requestId}`);
                        const mobileCard = document.getElementById(`mobile-request-${requestId}`);
                        
                        if (desktopRow) {
                            desktopRow.style.transition = 'opacity 0.5s';
                            desktopRow.style.opacity = '0';
                        }
                        if (mobileCard) {
                            mobileCard.style.transition = 'opacity 0.5s';
                            mobileCard.style.opacity = '0';
                        }
                        
                        setTimeout(() => {
                            if (desktopRow) desktopRow.remove();
                            if (mobileCard) mobileCard.remove();
                            
                            // Update pending count
                            const badge = document.querySelector('.badge');
                            const currentCount = parseInt(badge.textContent.replace(' Pending', ''));
                            badge.textContent = `${currentCount - 1} Pending`;
                            
                            // Check if team has no more requests and remove team separator if needed
                            const teamName = desktopRow ? desktopRow.previousElementSibling?.textContent.trim() : null;
                            if (teamName) {
                                checkAndRemoveEmptyTeamSeparator(teamName);
                            }
                            
                            // Show empty state if no more requests
                            const hasRequestRows = document.querySelectorAll('tbody tr:not(.team-separator)').length === 0;
                            const hasMobileCards = document.querySelector('.d-lg-none .mobile-request-card');
                            if (hasRequestRows && !hasMobileCards) {
                                location.reload();
                            }
                        }, 500);
                        
                        showAlert('success', data.message);
                        
                        // Show message about auto-rejected conflicting requests
                        if (data.rejectedRequests && (data.rejectedRequests.pickup > 0 || data.rejectedRequests.drop > 0)) {
                            const totalRejected = data.rejectedRequests.pickup + data.rejectedRequests.drop;
                            showAlert('info', `${totalRejected} conflicting request(s) automatically rejected`);
                        }
                        
                        // Reload page after 1.5 seconds to show all changes
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        showAlert('danger', data.message);
                    }
                })
                .catch(error => {
                    showAlert('danger', 'Error approving request');
                });
            }
        });
    });

    // Show reject modal
    document.querySelectorAll('.reject-btn').forEach(function(btn) {
        btn.addEventListener('click', function() {
            currentRequestId = this.getAttribute('data-request-id');
            const teamName = this.getAttribute('data-team-name');
            const pickupName = this.getAttribute('data-pickup-name');
            const dropName = this.getAttribute('data-drop-name');
            
            document.getElementById('reject-details').innerHTML = `
                <div class="alert alert-warning">
                    <strong>Team:</strong> ${teamName}<br>
                    <strong>Pick up:</strong> ${pickupName}<br>
                    <strong>Drop:</strong> ${dropName}
                </div>
            `;
            
            document.getElementById('rejection-notes').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('rejectModal'), {
                backdrop: false
            });
            modal.show();
        });
    });

    // Confirm rejection
    document.getElementById('confirm-reject').addEventListener('click', function() {
        const notes = document.getElementById('rejection-notes').value.trim();
        
        fetch(`/waivers/admin/${currentRequestId}/reject`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                notes: notes || null
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove both desktop and mobile versions
                const desktopRow = document.getElementById(`request-${currentRequestId}`);
                const mobileCard = document.getElementById(`mobile-request-${currentRequestId}`);
                
                if (desktopRow) {
                    desktopRow.style.transition = 'opacity 0.5s';
                    desktopRow.style.opacity = '0';
                }
                if (mobileCard) {
                    mobileCard.style.transition = 'opacity 0.5s';
                    mobileCard.style.opacity = '0';
                }
                
                setTimeout(() => {
                    if (desktopRow) desktopRow.remove();
                    if (mobileCard) mobileCard.remove();
                    
                    // Update pending count
                    const badge = document.querySelector('.badge');
                    const currentCount = parseInt(badge.textContent.replace(' Pending', ''));
                    badge.textContent = `${currentCount - 1} Pending`;
                    
                    // Check if team has no more requests and remove team separator if needed
                    const teamName = desktopRow ? desktopRow.previousElementSibling?.textContent.trim() : null;
                    if (teamName) {
                        checkAndRemoveEmptyTeamSeparator(teamName);
                    }
                    
                    // Show empty state if no more requests
                    const hasRequestRows = document.querySelectorAll('tbody tr:not(.team-separator)').length === 0;
                    const hasMobileCards = document.querySelector('.d-lg-none .mobile-request-card');
                    if (hasRequestRows && !hasMobileCards) {
                        location.reload();
                    }
                }, 500);
                
                const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
                modal.hide();
                showAlert('success', data.message);
            } else {
                showAlert('danger', data.message);
            }
        })
        .catch(error => {
            showAlert('danger', 'Error rejecting request');
        });
    });

    function showAlert(type, message) {
        const alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        // Add alert to top of card body
        const cardBody = document.querySelector('.card-body');
        cardBody.insertAdjacentHTML('afterbegin', alertHtml);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const alert = cardBody.querySelector('.alert');
            if (alert) {
                alert.remove();
            }
        }, 5000);
    }
    
    function checkAndRemoveEmptyTeamSeparator(teamName) {
        // Find all team separators
        const teamSeparators = document.querySelectorAll('.team-separator');
        
        teamSeparators.forEach(separator => {
            const separatorTeamName = separator.textContent.trim();
            
            if (separatorTeamName.includes(teamName)) {
                // Check if this team has any remaining requests
                let nextRow = separator.nextElementSibling;
                let hasRequests = false;
                
                // Look at rows until we find another team separator or end of table
                while (nextRow && !nextRow.classList.contains('team-separator')) {
                    if (!nextRow.classList.contains('team-separator')) {
                        hasRequests = true;
                        break;
                    }
                    nextRow = nextRow.nextElementSibling;
                }
                
                // If no requests found for this team, remove the separator
                if (!hasRequests) {
                    separator.remove();
                }
            }
        });
    }
});
</script>

<style>
.transaction-details {
    font-size: 0.9rem;
}

.pickup, .drop {
    line-height: 1.4;
}

.table td {
    vertical-align: middle;
}

.btn-group .btn {
    margin-right: 0;
}

.fs-6 {
    font-size: 1rem !important;
}

/* Team separator styling */
.team-separator {
    background-color: #f8f9fa !important;
    font-weight: 500;
}

.team-separator td {
    border-top: 2px solid #dee2e6 !important;
    border-bottom: 1px solid #dee2e6 !important;
}

/* Modal styling fix */
.modal {
    background-color: rgba(0, 0, 0, 0.5);
    pointer-events: auto;
}

.modal.show {
    display: flex !important;
    align-items: center;
    justify-content: center;
}

.modal-dialog {
    pointer-events: auto;
    z-index: 1060;
}

/* Mobile-specific styles */
.mobile-request-card {
    border-left: 4px solid #0d6efd;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.mobile-request-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.player-info {
    margin-top: 4px;
}

.transaction-mobile .fw-bold {
    font-size: 0.95rem;
}

@media (max-width: 576px) {
    .mobile-request-card .card-body {
        padding: 1rem 0.75rem;
    }
    
    .d-grid .btn {
        font-size: 0.9rem;
        padding: 0.5rem;
    }
}

/* Header responsive adjustments */
@media (max-width: 768px) {
    .row.align-items-center.mb-4 {
        text-align: center;
    }
    
    .row.align-items-center.mb-4 .col-md-4 {
        margin-top: 1rem;
    }
}
</style>