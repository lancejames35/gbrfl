<!-- Page Header -->
<div class="row align-items-center mb-4">
    <div class="col-md-8">
        <h1 class="mb-0">
            <i class="bi bi-arrow-repeat"></i> Pending Waiver Requests
        </h1>
        <p class="text-muted mb-0">Team: <%= team.team_name %></p>
    </div>
    <div class="col-md-4 text-md-end">
        <a href="/players?availability=available" class="btn btn-outline-primary">
            <i class="bi bi-plus-circle"></i> Submit New Request
        </a>
    </div>
</div>

<% if (requests.length === 0) { %>
    <!-- No Requests -->
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-inbox display-4 text-muted mb-3"></i>
            <h4>No Pending Waiver Requests</h4>
            <p class="text-muted mb-4">You don't have any pending waiver wire requests at this time.</p>
            <a href="/players?availability=available" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Submit Your First Request
            </a>
        </div>
    </div>
<% } else { %>
    <!-- Instructions -->
    <div class="alert alert-info mb-4">
        <i class="bi bi-info-circle-fill"></i>
        <strong>Prioritize Your Requests:</strong> Drag and drop to reorder your waiver requests by priority within each round. 
        1st round requests are processed first, then 2nd round requests are processed.
    </div>

    <% 
    // Separate requests by waiver round
    const firstRoundRequests = requests.filter(r => r.waiver_round === '1st');
    const secondRoundRequests = requests.filter(r => r.waiver_round === '2nd');
    %>

    <!-- First Round Waiver Requests -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
            <h5 class="mb-0">
                <i class="bi bi-1-circle me-2"></i>1st Round Waivers (<%= firstRoundRequests.length %>)
            </h5>
            <div>
                <span class="text-white-50 small" id="saveStatus1st" style="display: none;">
                    <i class="bi bi-check-circle"></i> Auto-saved
                </span>
            </div>
        </div>
        <div class="card-body p-0">
            <% if (firstRoundRequests.length === 0) { %>
                <div class="text-center text-muted py-4">
                    <i class="bi bi-inbox display-6"></i>
                    <p class="mt-2 mb-0">No 1st round waiver requests</p>
                </div>
            <% } else { %>
                <div class="waiver-requests-container" id="waiverRequestsList1st" data-round="1st">
                    <% firstRoundRequests.forEach((request, index) => { %>
                        <div class="waiver-request-item" data-request-id="<%= request.request_id %>" data-original-order="<%= request.request_order %>" data-round="1st">
                            <div class="d-flex align-items-center p-3">
                                <!-- Drag Handle -->
                                <div class="drag-handle me-3">
                                    <i class="bi bi-grip-vertical text-muted"></i>
                                </div>
                                
                                <!-- Priority Number -->
                                <div class="priority-number me-3">
                                    <span class="badge bg-primary priority-badge"><%= request.request_order %></span>
                                </div>
                                
                                <!-- Round Badge -->
                                <div class="round-badge me-3">
                                    <span class="badge bg-secondary">1st</span>
                                </div>
                                
                                <!-- Request Details -->
                                <div class="flex-grow-1">
                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="pickup-info">
                                                <strong class="text-success">
                                                    <i class="bi bi-plus-circle"></i> Add: <%= request.pickup_name %>
                                                </strong>
                                                <br>
                                                <small class="text-muted">
                                                    <%= request.pickup_position %> - <%= request.pickup_team || 'FA' %>
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <div class="drop-info">
                                                <strong class="text-danger">
                                                    <i class="bi bi-dash-circle"></i> Drop: <%= request.drop_name %>
                                                </strong>
                                                <br>
                                                <small class="text-muted">
                                                    <%= request.drop_position %> - <%= request.drop_team || 'FA' %>
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="submitted-info text-md-end">
                                                <small class="text-muted">
                                                    Submitted:<br>
                                                    <%= new Date(request.submitted_at).toLocaleDateString() %>
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Cancel Button -->
                                <div class="ms-3">
                                    <button class="btn btn-sm btn-outline-danger cancel-request-btn" 
                                            data-request-id="<%= request.request_id %>"
                                            data-pickup-name="<%= request.pickup_name %>"
                                            title="Cancel this request">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Second Round Waiver Requests -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center bg-warning text-dark">
            <h5 class="mb-0">
                <i class="bi bi-2-circle me-2"></i>2nd Round Waivers (<%= secondRoundRequests.length %>)
            </h5>
            <div>
                <span class="text-dark-50 small" id="saveStatus2nd" style="display: none;">
                    <i class="bi bi-check-circle"></i> Auto-saved
                </span>
            </div>
        </div>
        <div class="card-body p-0">
            <% if (secondRoundRequests.length === 0) { %>
                <div class="text-center text-muted py-4">
                    <i class="bi bi-inbox display-6"></i>
                    <p class="mt-2 mb-0">No 2nd round waiver requests</p>
                </div>
            <% } else { %>
                <div class="waiver-requests-container" id="waiverRequestsList2nd" data-round="2nd">
                    <% secondRoundRequests.forEach((request, index) => { %>
                        <div class="waiver-request-item" data-request-id="<%= request.request_id %>" data-original-order="<%= request.request_order %>" data-round="2nd">
                            <div class="d-flex align-items-center p-3">
                                <!-- Drag Handle -->
                                <div class="drag-handle me-3">
                                    <i class="bi bi-grip-vertical text-muted"></i>
                                </div>
                                
                                <!-- Priority Number -->
                                <div class="priority-number me-3">
                                    <span class="badge bg-warning text-dark priority-badge"><%= request.request_order %></span>
                                </div>
                                
                                <!-- Round Badge -->
                                <div class="round-badge me-3">
                                    <span class="badge bg-secondary">2nd</span>
                                </div>
                                
                                <!-- Request Details -->
                                <div class="flex-grow-1">
                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="pickup-info">
                                                <strong class="text-success">
                                                    <i class="bi bi-plus-circle"></i> Add: <%= request.pickup_name %>
                                                </strong>
                                                <br>
                                                <small class="text-muted">
                                                    <%= request.pickup_position %> - <%= request.pickup_team || 'FA' %>
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <div class="drop-info">
                                                <strong class="text-danger">
                                                    <i class="bi bi-dash-circle"></i> Drop: <%= request.drop_name %>
                                                </strong>
                                                <br>
                                                <small class="text-muted">
                                                    <%= request.drop_position %> - <%= request.drop_team || 'FA' %>
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="submitted-info text-md-end">
                                                <small class="text-muted">
                                                    Submitted:<br>
                                                    <%= new Date(request.submitted_at).toLocaleDateString() %>
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Cancel Button -->
                                <div class="ms-3">
                                    <button class="btn btn-sm btn-outline-danger cancel-request-btn" 
                                            data-request-id="<%= request.request_id %>"
                                            data-pickup-name="<%= request.pickup_name %>"
                                            title="Cancel this request">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Processing Order Info -->
    <div class="card mt-4">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="bi bi-info-circle"></i> How Two-Round Waiver Processing Works
            </h6>
        </div>
        <div class="card-body">
            <ul class="mb-0">
                <li><strong>1st Round:</strong> All 1st round requests are processed first, in priority order within your team and by waiver priority between teams</li>
                <li><strong>2nd Round:</strong> After all 1st round requests are complete, 2nd round requests are processed using the remaining waiver priority order</li>
                <li><strong>Priority Order:</strong> Within each round, your requests are processed in the order shown (1 = highest priority)</li>
                <li><strong>Availability:</strong> If a player you want is claimed by another team, that request will be skipped</li>
                <li><strong>Roster Space:</strong> You must drop a player to add a new one - both actions happen together</li>
            </ul>
        </div>
    </div>
<% } %>

<style>
.waiver-request-item {
    border-bottom: 1px solid #dee2e6;
    transition: all 0.3s ease;
    background: #fff;
}

.waiver-request-item:last-child {
    border-bottom: none;
}

.waiver-request-item:hover {
    background-color: #f8f9fa;
}

.waiver-request-item.dragging {
    opacity: 0.8;
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    transform: rotate(2deg);
    z-index: 1000;
}

.waiver-request-item.drag-over {
    border-top: 3px solid #007bff;
}

.drag-handle {
    cursor: grab;
    padding: 5px;
    border-radius: 4px;
}

.drag-handle:hover {
    background-color: #e9ecef;
}

.drag-handle:active {
    cursor: grabbing;
}

.priority-badge {
    min-width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: bold;
}

.pickup-info strong {
    color: #28a745;
}

.drop-info strong {
    color: #dc3545;
}

.waiver-requests-container {
    min-height: 100px;
}

.cancel-request-btn {
    transition: all 0.2s ease;
}

.cancel-request-btn:hover {
    background-color: #dc3545;
    color: white;
    border-color: #dc3545;
}

.sortable-ghost {
    opacity: 0.4;
    background: #f8f9fa;
}

.sortable-chosen {
    background: #e3f2fd;
}

.sortable-drag {
    background: #fff;
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}
</style>

<!-- Include SortableJS from CDN -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const requestsList1st = document.getElementById('waiverRequestsList1st');
    const requestsList2nd = document.getElementById('waiverRequestsList2nd');
    const saveStatusSpan1st = document.getElementById('saveStatus1st');
    const saveStatusSpan2nd = document.getElementById('saveStatus2nd');
    const cancelRequestBtns = document.querySelectorAll('.cancel-request-btn');
    
    let originalOrder1st = [];
    let originalOrder2nd = [];
    let saveTimeout1st;
    let saveTimeout2nd;

    // Initialize sorting for 1st round requests
    if (requestsList1st) {
        // Store original order for 1st round
        const items1st = requestsList1st.querySelectorAll('.waiver-request-item');
        items1st.forEach(item => {
            originalOrder1st.push({
                request_id: parseInt(item.dataset.requestId),
                order: parseInt(item.dataset.originalOrder)
            });
        });

        // Initialize SortableJS for 1st round
        const sortable1st = new Sortable(requestsList1st, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            handle: '.drag-handle',
            onStart: function(evt) {
                evt.item.classList.add('dragging');
            },
            onEnd: function(evt) {
                evt.item.classList.remove('dragging');
                updatePriorityNumbers(requestsList1st);
                autoSaveOrder(requestsList1st, saveStatusSpan1st, 'saveTimeout1st');
            }
        });
    }

    // Initialize sorting for 2nd round requests
    if (requestsList2nd) {
        // Store original order for 2nd round
        const items2nd = requestsList2nd.querySelectorAll('.waiver-request-item');
        items2nd.forEach(item => {
            originalOrder2nd.push({
                request_id: parseInt(item.dataset.requestId),
                order: parseInt(item.dataset.originalOrder)
            });
        });

        // Initialize SortableJS for 2nd round
        const sortable2nd = new Sortable(requestsList2nd, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            handle: '.drag-handle',
            onStart: function(evt) {
                evt.item.classList.add('dragging');
            },
            onEnd: function(evt) {
                evt.item.classList.remove('dragging');
                updatePriorityNumbers(requestsList2nd);
                autoSaveOrder(requestsList2nd, saveStatusSpan2nd, 'saveTimeout2nd');
            }
        });
    }

    // Update priority numbers after reordering
    function updatePriorityNumbers(container) {
        const items = container.querySelectorAll('.waiver-request-item');
        items.forEach((item, index) => {
            const priorityBadge = item.querySelector('.priority-badge');
            priorityBadge.textContent = index + 1;
        });
    }

    // Auto-save order with debouncing
    function autoSaveOrder(container, statusSpan, timeoutVar) {
        // Clear any existing timeout
        if (timeoutVar === 'saveTimeout1st' && saveTimeout1st) {
            clearTimeout(saveTimeout1st);
        } else if (timeoutVar === 'saveTimeout2nd' && saveTimeout2nd) {
            clearTimeout(saveTimeout2nd);
        }
        
        // Show saving status
        statusSpan.style.display = 'inline-block';
        statusSpan.innerHTML = '<i class="bi bi-hourglass-split text-warning"></i> Saving...';
        
        // Debounce the save by 500ms
        const timeout = setTimeout(() => {
            const items = container.querySelectorAll('.waiver-request-item');
            const newOrder = [];
            
            items.forEach((item, index) => {
                newOrder.push({
                    request_id: parseInt(item.dataset.requestId),
                    order: index + 1
                });
            });

            fetch('/waivers/order', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ request_orders: newOrder })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update original order
                    if (timeoutVar === 'saveTimeout1st') {
                        originalOrder1st = [...newOrder];
                    } else {
                        originalOrder2nd = [...newOrder];
                    }
                    
                    // Show success status
                    statusSpan.innerHTML = '<i class="bi bi-check-circle"></i> Auto-saved';
                    
                    // Hide status after 2 seconds
                    setTimeout(() => {
                        statusSpan.style.display = 'none';
                    }, 2000);
                } else {
                    statusSpan.innerHTML = '<i class="bi bi-exclamation-triangle text-danger"></i> Save failed';
                    showToast('Error saving order: ' + data.message, 'danger');
                    setTimeout(() => {
                        statusSpan.style.display = 'none';
                    }, 3000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                statusSpan.innerHTML = '<i class="bi bi-exclamation-triangle text-danger"></i> Save failed';
                showToast('Error saving request order. Please try again.', 'danger');
                setTimeout(() => {
                    statusSpan.style.display = 'none';
                }, 3000);
            });
        }, 500);
        
        // Store timeout reference
        if (timeoutVar === 'saveTimeout1st') {
            saveTimeout1st = timeout;
        } else {
            saveTimeout2nd = timeout;
        }
    }

    // Cancel request functionality
    cancelRequestBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const requestId = this.dataset.requestId;
            const pickupName = this.dataset.pickupName;
            
            if (confirm(`Cancel waiver request for ${pickupName}?`)) {
                // Disable button
                this.disabled = true;
                this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

                fetch(`/waivers/request/${requestId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        // Remove the request item from the list
                        const requestItem = this.closest('.waiver-request-item');
                        requestItem.style.transition = 'all 0.3s ease';
                        requestItem.style.opacity = '0';
                        requestItem.style.transform = 'translateX(100%)';
                        
                        setTimeout(() => {
                            requestItem.remove();
                            updatePriorityNumbers();
                            
                            // Check if no requests left
                            if (requestsList.children.length === 0) {
                                location.reload();
                            }
                        }, 300);
                    } else {
                        showToast('Error cancelling request: ' + data.message, 'danger');
                        // Re-enable button
                        this.disabled = false;
                        this.innerHTML = '<i class="bi bi-x-lg"></i>';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error cancelling request. Please try again.', 'danger');
                    // Re-enable button
                    this.disabled = false;
                    this.innerHTML = '<i class="bi bi-x-lg"></i>';
                });
            }
        });
    });

    // Toast notification function
    function showToast(message, type = 'info') {
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }
});
</script>