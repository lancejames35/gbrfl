<div class="container-fluid">
  <!-- Page Header -->
  <div class="row align-items-center mb-4">
    <div class="col-md-8">
      <h1 class="mb-0">Notifications</h1>
      <p class="text-muted">Stay updated with league activity and announcements</p>
    </div>
    <div class="col-md-4 text-md-end">
      <% if (unreadCount > 0) { %>
        <button id="markAllReadBtn" class="btn btn-outline-primary btn-sm">
          <i class="bi bi-check-all"></i> Mark All Read (<%= unreadCount %>)
        </button>
      <% } %>
    </div>
  </div>

  <!-- Notifications List -->
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-body">
          <% if (notifications.length === 0) { %>
            <!-- Empty State -->
            <div class="text-center py-5">
              <i class="bi bi-bell-slash display-1 text-muted"></i>
              <h4 class="mt-3 text-muted">No notifications yet</h4>
              <p class="text-muted">You'll see notifications here when there's league activity</p>
            </div>
          <% } else { %>
            <!-- Notifications List -->
            <div class="list-group list-group-flush">
              <% notifications.forEach(notification => { %>
                <div class="list-group-item <%= !notification.is_read ? 'notification-unread' : '' %> notification-item" 
                     data-id="<%= notification.notification_id %>">
                  <div class="d-flex w-100 justify-content-between align-items-start">
                    <div class="flex-grow-1">
                      <div class="d-flex align-items-center mb-1">
                        <span class="notification-icon me-2 <%= getNotificationColor(notification.type) %>">
                          <i class="bi <%= getNotificationIcon(notification.type) %>"></i>
                        </span>
                        <h6 class="mb-0 fw-semibold"><%= notification.title %></h6>
                        <% if (notification.priority === 'high' || notification.priority === 'urgent') { %>
                          <span class="badge bg-<%= notification.priority === 'urgent' ? 'danger' : 'warning' %> ms-2">
                            <%= notification.priority %>
                          </span>
                        <% } %>
                      </div>
                      <p class="mb-1 text-muted"><%= notification.message %></p>
                      <small class="text-muted">
                        <i class="bi bi-clock"></i> 
                        <%= formatTimeAgo(notification.created_at) %>
                      </small>
                    </div>
                    <div class="d-flex align-items-center">
                      <% if (!notification.is_read) { %>
                        <span class="badge bg-primary me-2">New</span>
                      <% } %>
                      <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary" type="button" 
                                data-bs-toggle="dropdown" aria-expanded="false">
                          <i class="bi bi-three-dots-vertical"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                          <% if (!notification.is_read) { %>
                            <li>
                              <a class="dropdown-item" href="#" onclick="markAsRead(<%= notification.notification_id %>)">
                                <i class="bi bi-check2"></i> Mark as read
                              </a>
                            </li>
                          <% } %>
                          <% if (notification.action_url) { %>
                            <li>
                              <a class="dropdown-item" href="<%= notification.action_url %>">
                                <i class="bi bi-arrow-right"></i> View details
                              </a>
                            </li>
                          <% } %>
                          <li>
                            <a class="dropdown-item text-danger" href="#" onclick="deleteNotification(<%= notification.notification_id %>)">
                              <i class="bi bi-trash"></i> Delete
                            </a>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Pagination -->
      <% if (hasPrevPage || hasNextPage) { %>
        <nav aria-label="Notifications pagination" class="mt-4">
          <ul class="pagination justify-content-center">
            <% if (hasPrevPage) { %>
              <li class="page-item">
                <a class="page-link" href="/notifications?page=<%= currentPage - 1 %>">
                  <i class="bi bi-chevron-left"></i> Previous
                </a>
              </li>
            <% } %>
            <li class="page-item active">
              <span class="page-link">Page <%= currentPage %></span>
            </li>
            <% if (hasNextPage) { %>
              <li class="page-item">
                <a class="page-link" href="/notifications?page=<%= currentPage + 1 %>">
                  Next <i class="bi bi-chevron-right"></i>
                </a>
              </li>
            <% } %>
          </ul>
        </nav>
      <% } %>
    </div>
  </div>
</div>

<!-- Helper functions for EJS -->
<%
function getNotificationIcon(type) {
  const icons = {
    trade: 'bi-arrow-left-right',
    draft: 'bi-trophy',
    waiver: 'bi-clipboard-check',
    league: 'bi-megaphone',
    player_update: 'bi-person-exclamation',
    keeper: 'bi-shield-check',
    system: 'bi-gear',
    message: 'bi-envelope'
  };
  return icons[type] || 'bi-info-circle';
}

function getNotificationColor(type) {
  const colors = {
    trade: 'text-info',
    draft: 'text-warning',
    waiver: 'text-success',
    league: 'text-primary',
    player_update: 'text-danger',
    keeper: 'text-warning',
    system: 'text-secondary',
    message: 'text-info'
  };
  return colors[type] || 'text-muted';
}

function formatTimeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);

  if (diffInSeconds < 60) {
    return 'Just now';
  } else if (diffInSeconds < 3600) {
    const minutes = Math.floor(diffInSeconds / 60);
    return `${minutes} minute${minutes === 1 ? '' : 's'} ago`;
  } else if (diffInSeconds < 86400) {
    const hours = Math.floor(diffInSeconds / 3600);
    return `${hours} hour${hours === 1 ? '' : 's'} ago`;
  } else {
    const days = Math.floor(diffInSeconds / 86400);
    if (days === 1) return 'Yesterday';
    if (days < 7) return `${days} days ago`;
    return date.toLocaleDateString();
  }
}
%>

<script>
// JavaScript for notification actions
async function markAsRead(notificationId) {
  try {
    const response = await fetch(`/api/notifications/${notificationId}/read`, {
      method: 'PUT',
      credentials: 'include'
    });
    
    if (response.ok) {
      location.reload();
    }
  } catch (error) {
    console.error('Error marking notification as read:', error);
  }
}

async function deleteNotification(notificationId) {
  if (!confirm('Are you sure you want to delete this notification?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/notifications/${notificationId}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    
    if (response.ok) {
      location.reload();
    }
  } catch (error) {
    console.error('Error deleting notification:', error);
  }
}

async function markAllAsRead() {
  try {
    const response = await fetch('/api/notifications/mark-all-read', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include'
    });
    
    if (response.ok) {
      location.reload();
    }
  } catch (error) {
    console.error('Error marking all as read:', error);
  }
}

// Bind mark all read button
document.addEventListener('DOMContentLoaded', function() {
  const markAllBtn = document.getElementById('markAllReadBtn');
  if (markAllBtn) {
    markAllBtn.addEventListener('click', markAllAsRead);
  }
});
</script>

<style>
.notification-unread {
  background-color: #f8f9ff;
  border-left: 4px solid #007bff;
}

.notification-icon {
  font-size: 1.1rem;
}

.notification-item:hover {
  background-color: #f8f9fa;
}
</style>